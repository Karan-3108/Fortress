// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fortress/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRequestFortress struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount     string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee        string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	Collateral string `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral,omitempty"`
	Deadline   string `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *MsgRequestFortress) Reset()         { *m = MsgRequestFortress{} }
func (m *MsgRequestFortress) String() string { return proto.CompactTextString(m) }
func (*MsgRequestFortress) ProtoMessage()    {}
func (*MsgRequestFortress) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{0}
}
func (m *MsgRequestFortress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestFortress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestFortress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestFortress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestFortress.Merge(m, src)
}
func (m *MsgRequestFortress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestFortress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestFortress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestFortress proto.InternalMessageInfo

func (m *MsgRequestFortress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestFortress) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgRequestFortress) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *MsgRequestFortress) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *MsgRequestFortress) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

type MsgRequestFortressResponse struct {
}

func (m *MsgRequestFortressResponse) Reset()         { *m = MsgRequestFortressResponse{} }
func (m *MsgRequestFortressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestFortressResponse) ProtoMessage()    {}
func (*MsgRequestFortressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{1}
}
func (m *MsgRequestFortressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestFortressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestFortressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestFortressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestFortressResponse.Merge(m, src)
}
func (m *MsgRequestFortressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestFortressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestFortressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestFortressResponse proto.InternalMessageInfo

type MsgApproveFortress struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgApproveFortress) Reset()         { *m = MsgApproveFortress{} }
func (m *MsgApproveFortress) String() string { return proto.CompactTextString(m) }
func (*MsgApproveFortress) ProtoMessage()    {}
func (*MsgApproveFortress) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{2}
}
func (m *MsgApproveFortress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveFortress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveFortress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveFortress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveFortress.Merge(m, src)
}
func (m *MsgApproveFortress) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveFortress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveFortress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveFortress proto.InternalMessageInfo

func (m *MsgApproveFortress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApproveFortress) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgApproveFortressResponse struct {
}

func (m *MsgApproveFortressResponse) Reset()         { *m = MsgApproveFortressResponse{} }
func (m *MsgApproveFortressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveFortressResponse) ProtoMessage()    {}
func (*MsgApproveFortressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{3}
}
func (m *MsgApproveFortressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveFortressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveFortressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveFortressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveFortressResponse.Merge(m, src)
}
func (m *MsgApproveFortressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveFortressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveFortressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveFortressResponse proto.InternalMessageInfo

type MsgRepayFortress struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRepayFortress) Reset()         { *m = MsgRepayFortress{} }
func (m *MsgRepayFortress) String() string { return proto.CompactTextString(m) }
func (*MsgRepayFortress) ProtoMessage()    {}
func (*MsgRepayFortress) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{4}
}
func (m *MsgRepayFortress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRepayFortress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRepayFortress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRepayFortress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRepayFortress.Merge(m, src)
}
func (m *MsgRepayFortress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRepayFortress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRepayFortress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRepayFortress proto.InternalMessageInfo

func (m *MsgRepayFortress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRepayFortress) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgRepayFortressResponse struct {
}

func (m *MsgRepayFortressResponse) Reset()         { *m = MsgRepayFortressResponse{} }
func (m *MsgRepayFortressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRepayFortressResponse) ProtoMessage()    {}
func (*MsgRepayFortressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{5}
}
func (m *MsgRepayFortressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRepayFortressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRepayFortressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRepayFortressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRepayFortressResponse.Merge(m, src)
}
func (m *MsgRepayFortressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRepayFortressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRepayFortressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRepayFortressResponse proto.InternalMessageInfo

type MsgLiquidateFortress struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgLiquidateFortress) Reset()         { *m = MsgLiquidateFortress{} }
func (m *MsgLiquidateFortress) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidateFortress) ProtoMessage()    {}
func (*MsgLiquidateFortress) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{6}
}
func (m *MsgLiquidateFortress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidateFortress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidateFortress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidateFortress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidateFortress.Merge(m, src)
}
func (m *MsgLiquidateFortress) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidateFortress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidateFortress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidateFortress proto.InternalMessageInfo

func (m *MsgLiquidateFortress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLiquidateFortress) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgLiquidateFortressResponse struct {
}

func (m *MsgLiquidateFortressResponse) Reset()         { *m = MsgLiquidateFortressResponse{} }
func (m *MsgLiquidateFortressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidateFortressResponse) ProtoMessage()    {}
func (*MsgLiquidateFortressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{7}
}
func (m *MsgLiquidateFortressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidateFortressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidateFortressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidateFortressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidateFortressResponse.Merge(m, src)
}
func (m *MsgLiquidateFortressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidateFortressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidateFortressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidateFortressResponse proto.InternalMessageInfo

type MsgCancelFortress struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCancelFortress) Reset()         { *m = MsgCancelFortress{} }
func (m *MsgCancelFortress) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFortress) ProtoMessage()    {}
func (*MsgCancelFortress) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{8}
}
func (m *MsgCancelFortress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFortress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFortress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFortress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFortress.Merge(m, src)
}
func (m *MsgCancelFortress) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFortress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFortress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFortress proto.InternalMessageInfo

func (m *MsgCancelFortress) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelFortress) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCancelFortressResponse struct {
}

func (m *MsgCancelFortressResponse) Reset()         { *m = MsgCancelFortressResponse{} }
func (m *MsgCancelFortressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFortressResponse) ProtoMessage()    {}
func (*MsgCancelFortressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_117d267f734e394b, []int{9}
}
func (m *MsgCancelFortressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFortressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFortressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFortressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFortressResponse.Merge(m, src)
}
func (m *MsgCancelFortressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFortressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFortressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFortressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRequestFortress)(nil), "Karan3108.fortress.fortress.MsgRequestFortress")
	proto.RegisterType((*MsgRequestFortressResponse)(nil), "Karan3108.fortress.fortress.MsgRequestFortressResponse")
	proto.RegisterType((*MsgApproveFortress)(nil), "Karan3108.fortress.fortress.MsgApproveFortress")
	proto.RegisterType((*MsgApproveFortressResponse)(nil), "Karan3108.fortress.fortress.MsgApproveFortressResponse")
	proto.RegisterType((*MsgRepayFortress)(nil), "Karan3108.fortress.fortress.MsgRepayFortress")
	proto.RegisterType((*MsgRepayFortressResponse)(nil), "Karan3108.fortress.fortress.MsgRepayFortressResponse")
	proto.RegisterType((*MsgLiquidateFortress)(nil), "Karan3108.fortress.fortress.MsgLiquidateFortress")
	proto.RegisterType((*MsgLiquidateFortressResponse)(nil), "Karan3108.fortress.fortress.MsgLiquidateFortressResponse")
	proto.RegisterType((*MsgCancelFortress)(nil), "Karan3108.fortress.fortress.MsgCancelFortress")
	proto.RegisterType((*MsgCancelFortressResponse)(nil), "Karan3108.fortress.fortress.MsgCancelFortressResponse")
}

func init() { proto.RegisterFile("fortress/tx.proto", fileDescriptor_117d267f734e394b) }

var fileDescriptor_117d267f734e394b = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x29, 0x20, 0xea, 0x9b, 0x88, 0x30, 0x31, 0xa6, 0x16, 0x32, 0x31, 0x9c, 0xbc, 0xd0,
	0x8a, 0xc4, 0x7f, 0x89, 0x1a, 0xff, 0x24, 0x26, 0x46, 0x7b, 0xe9, 0xd1, 0xdb, 0xd0, 0x0e, 0xb5,
	0x49, 0xe9, 0x94, 0x99, 0xa9, 0x81, 0x78, 0xf2, 0x1b, 0x78, 0xf0, 0x43, 0xed, 0x91, 0xe3, 0x1e,
	0x37, 0xf0, 0x15, 0xf6, 0x03, 0x6c, 0x98, 0xd0, 0x2e, 0xb4, 0xbb, 0xdb, 0x2d, 0xb7, 0xce, 0xfb,
	0xbe, 0xcf, 0xef, 0x79, 0x9a, 0x79, 0x33, 0xd0, 0x9d, 0x32, 0x2e, 0x39, 0x15, 0xc2, 0x92, 0x0b,
	0x33, 0xe6, 0x4c, 0x32, 0xd4, 0xfb, 0x4e, 0x38, 0x89, 0xc6, 0xa3, 0xe7, 0x6f, 0xcc, 0xb4, 0x99,
	0x7d, 0x0c, 0xfe, 0x6b, 0x80, 0x6c, 0xe1, 0x3b, 0x74, 0x9e, 0x50, 0x21, 0xbf, 0xee, 0xca, 0x48,
	0x87, 0xbb, 0x2e, 0xa7, 0x44, 0x32, 0xae, 0x6b, 0x4f, 0xb5, 0x67, 0xf7, 0x9d, 0xf4, 0x88, 0x1e,
	0x43, 0x8b, 0xcc, 0x58, 0x12, 0x49, 0xbd, 0xae, 0x1a, 0xbb, 0x13, 0xea, 0x40, 0x63, 0x4a, 0xa9,
	0xde, 0x50, 0xc5, 0xed, 0x27, 0xc2, 0x00, 0x2e, 0x0b, 0x43, 0x22, 0x29, 0x27, 0xa1, 0xde, 0x54,
	0x8d, 0xbd, 0x0a, 0x32, 0xe0, 0x9e, 0x47, 0x89, 0x17, 0x06, 0x11, 0xd5, 0xef, 0xa8, 0x6e, 0x76,
	0x1e, 0xf4, 0xc1, 0x28, 0xa6, 0x72, 0xa8, 0x88, 0x59, 0x24, 0xe8, 0xe0, 0x83, 0xca, 0xfc, 0x29,
	0x8e, 0x39, 0xfb, 0x4d, 0x6f, 0x91, 0xb9, 0x0d, 0xf5, 0xc0, 0x53, 0x79, 0x9b, 0x4e, 0x3d, 0xf0,
	0x76, 0xf4, 0x9c, 0x3e, 0xa3, 0xbf, 0x83, 0x8e, 0xf2, 0x8e, 0xc9, 0xf2, 0x08, 0xb6, 0x01, 0x7a,
	0x5e, 0x9d, 0x91, 0x3f, 0xc2, 0x23, 0x5b, 0xf8, 0x3f, 0x82, 0x79, 0x12, 0x78, 0x44, 0x1e, 0x93,
	0x1c, 0x43, 0xff, 0x2a, 0x42, 0xe6, 0xf0, 0x1e, 0xba, 0xb6, 0xf0, 0xbf, 0x90, 0xc8, 0xa5, 0xe1,
	0x11, 0xf8, 0x1e, 0x3c, 0x29, 0xc8, 0x53, 0xf6, 0x8b, 0xf3, 0x26, 0x34, 0x6c, 0xe1, 0xa3, 0x3f,
	0xf0, 0x30, 0xbf, 0x2e, 0x96, 0x79, 0xc3, 0x8e, 0x99, 0xc5, 0x9b, 0x34, 0x5e, 0x57, 0x14, 0xa4,
	0x21, 0xb6, 0xe6, 0xf9, 0x7b, 0x2f, 0x35, 0xcf, 0x09, 0xca, 0xcd, 0xaf, 0xd9, 0x0c, 0x94, 0xc0,
	0x83, 0xc3, 0xb5, 0x18, 0x96, 0xff, 0xc6, 0xde, 0xb8, 0xf1, 0xb2, 0xd2, 0x78, 0x66, 0xfb, 0x57,
	0x83, 0x6e, 0x71, 0x69, 0x46, 0x65, 0xb0, 0x82, 0xc4, 0x78, 0x5b, 0x59, 0x92, 0x65, 0x58, 0x40,
	0x3b, 0xb7, 0x55, 0x66, 0x19, 0xec, 0x70, 0xde, 0x78, 0x55, 0x6d, 0x3e, 0x75, 0xfe, 0xfc, 0xed,
	0x64, 0x8d, 0xb5, 0xd5, 0x1a, 0x6b, 0x67, 0x6b, 0xac, 0xfd, 0xdb, 0xe0, 0xda, 0x6a, 0x83, 0x6b,
	0xa7, 0x1b, 0x5c, 0xfb, 0x69, 0xf9, 0x81, 0xfc, 0x95, 0x4c, 0x4c, 0x97, 0xcd, 0x2c, 0xc5, 0x1e,
	0x6e, 0xe1, 0x56, 0x4a, 0xb0, 0x16, 0xd6, 0xe5, 0x63, 0xb8, 0x8c, 0xa9, 0x98, 0xb4, 0xd4, 0x83,
	0x38, 0xbe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x85, 0x67, 0x26, 0xcd, 0x25, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RequestFortress(ctx context.Context, in *MsgRequestFortress, opts ...grpc.CallOption) (*MsgRequestFortressResponse, error)
	ApproveFortress(ctx context.Context, in *MsgApproveFortress, opts ...grpc.CallOption) (*MsgApproveFortressResponse, error)
	RepayFortress(ctx context.Context, in *MsgRepayFortress, opts ...grpc.CallOption) (*MsgRepayFortressResponse, error)
	LiquidateFortress(ctx context.Context, in *MsgLiquidateFortress, opts ...grpc.CallOption) (*MsgLiquidateFortressResponse, error)
	CancelFortress(ctx context.Context, in *MsgCancelFortress, opts ...grpc.CallOption) (*MsgCancelFortressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RequestFortress(ctx context.Context, in *MsgRequestFortress, opts ...grpc.CallOption) (*MsgRequestFortressResponse, error) {
	out := new(MsgRequestFortressResponse)
	err := c.cc.Invoke(ctx, "/Karan3108.fortress.fortress.Msg/RequestFortress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveFortress(ctx context.Context, in *MsgApproveFortress, opts ...grpc.CallOption) (*MsgApproveFortressResponse, error) {
	out := new(MsgApproveFortressResponse)
	err := c.cc.Invoke(ctx, "/Karan3108.fortress.fortress.Msg/ApproveFortress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RepayFortress(ctx context.Context, in *MsgRepayFortress, opts ...grpc.CallOption) (*MsgRepayFortressResponse, error) {
	out := new(MsgRepayFortressResponse)
	err := c.cc.Invoke(ctx, "/Karan3108.fortress.fortress.Msg/RepayFortress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LiquidateFortress(ctx context.Context, in *MsgLiquidateFortress, opts ...grpc.CallOption) (*MsgLiquidateFortressResponse, error) {
	out := new(MsgLiquidateFortressResponse)
	err := c.cc.Invoke(ctx, "/Karan3108.fortress.fortress.Msg/LiquidateFortress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelFortress(ctx context.Context, in *MsgCancelFortress, opts ...grpc.CallOption) (*MsgCancelFortressResponse, error) {
	out := new(MsgCancelFortressResponse)
	err := c.cc.Invoke(ctx, "/Karan3108.fortress.fortress.Msg/CancelFortress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RequestFortress(context.Context, *MsgRequestFortress) (*MsgRequestFortressResponse, error)
	ApproveFortress(context.Context, *MsgApproveFortress) (*MsgApproveFortressResponse, error)
	RepayFortress(context.Context, *MsgRepayFortress) (*MsgRepayFortressResponse, error)
	LiquidateFortress(context.Context, *MsgLiquidateFortress) (*MsgLiquidateFortressResponse, error)
	CancelFortress(context.Context, *MsgCancelFortress) (*MsgCancelFortressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RequestFortress(ctx context.Context, req *MsgRequestFortress) (*MsgRequestFortressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFortress not implemented")
}
func (*UnimplementedMsgServer) ApproveFortress(ctx context.Context, req *MsgApproveFortress) (*MsgApproveFortressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFortress not implemented")
}
func (*UnimplementedMsgServer) RepayFortress(ctx context.Context, req *MsgRepayFortress) (*MsgRepayFortressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepayFortress not implemented")
}
func (*UnimplementedMsgServer) LiquidateFortress(ctx context.Context, req *MsgLiquidateFortress) (*MsgLiquidateFortressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidateFortress not implemented")
}
func (*UnimplementedMsgServer) CancelFortress(ctx context.Context, req *MsgCancelFortress) (*MsgCancelFortressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFortress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RequestFortress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestFortress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestFortress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Karan3108.fortress.fortress.Msg/RequestFortress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestFortress(ctx, req.(*MsgRequestFortress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveFortress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveFortress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveFortress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Karan3108.fortress.fortress.Msg/ApproveFortress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveFortress(ctx, req.(*MsgApproveFortress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RepayFortress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRepayFortress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RepayFortress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Karan3108.fortress.fortress.Msg/RepayFortress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RepayFortress(ctx, req.(*MsgRepayFortress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LiquidateFortress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidateFortress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidateFortress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Karan3108.fortress.fortress.Msg/LiquidateFortress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidateFortress(ctx, req.(*MsgLiquidateFortress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelFortress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelFortress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelFortress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Karan3108.fortress.fortress.Msg/CancelFortress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelFortress(ctx, req.(*MsgCancelFortress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Karan3108.fortress.fortress.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFortress",
			Handler:    _Msg_RequestFortress_Handler,
		},
		{
			MethodName: "ApproveFortress",
			Handler:    _Msg_ApproveFortress_Handler,
		},
		{
			MethodName: "RepayFortress",
			Handler:    _Msg_RepayFortress_Handler,
		},
		{
			MethodName: "LiquidateFortress",
			Handler:    _Msg_LiquidateFortress_Handler,
		},
		{
			MethodName: "CancelFortress",
			Handler:    _Msg_CancelFortress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fortress/tx.proto",
}

func (m *MsgRequestFortress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestFortress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestFortress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestFortressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestFortressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestFortressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveFortress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveFortress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveFortress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveFortressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveFortressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveFortressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRepayFortress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRepayFortress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRepayFortress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRepayFortressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRepayFortressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRepayFortressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLiquidateFortress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidateFortress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidateFortress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidateFortressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidateFortressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidateFortressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelFortress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFortress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFortress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelFortressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFortressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFortressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRequestFortress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestFortressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveFortress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgApproveFortressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRepayFortress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRepayFortressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLiquidateFortress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgLiquidateFortressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelFortress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCancelFortressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRequestFortress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestFortress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestFortress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestFortressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestFortressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestFortressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveFortress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveFortress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveFortress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveFortressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveFortressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveFortressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRepayFortress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRepayFortress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRepayFortress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRepayFortressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRepayFortressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRepayFortressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidateFortress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidateFortress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidateFortress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidateFortressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidateFortressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidateFortressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFortress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFortress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFortress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFortressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFortressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFortressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
